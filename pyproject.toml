[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nlp-match-event-reporter"
version = "0.1.0"
description = "Real-time soccer match event reporting system using natural language processing and voice interaction"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PitchConnect", email = "info@pitchconnect.se"}
]
maintainers = [
    {name = "PitchConnect", email = "info@pitchconnect.se"}
]
keywords = ["soccer", "football", "nlp", "voice", "speech", "fogis", "referee"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Games/Entertainment :: Sports",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "loguru>=0.7.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "fogis-api-client-timmyBird>=0.5.0",
]

[project.optional-dependencies]
voice = [
    "pvporcupine>=3.0.0",
    "openai-whisper>=20231117",
    "pyaudio>=0.2.11",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
]
tts = [
    "kokoro-tts>=0.1.0",
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "httpx>=0.25.0",
]
all = [
    "nlp-match-event-reporter[voice,tts,dev]"
]

[project.urls]
Homepage = "https://github.com/PitchConnect/nlp-match-event-reporter"
Documentation = "https://github.com/PitchConnect/nlp-match-event-reporter/blob/main/README.md"
Repository = "https://github.com/PitchConnect/nlp-match-event-reporter"
Issues = "https://github.com/PitchConnect/nlp-match-event-reporter/issues"

[project.scripts]
nlp-reporter = "nlp_match_event_reporter.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["nlp_match_event_reporter"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pvporcupine.*",
    "whisper.*",
    "pyaudio.*",
    "scipy.*",
    "torch.*",
    "torchaudio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/nlp_match_event_reporter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "voice: marks tests that require voice processing",
]

[tool.coverage.run]
source = ["src/nlp_match_event_reporter"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
